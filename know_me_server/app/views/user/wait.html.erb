<div class = "full_body_white row" style="align-content:center;">
    <div class = "col">
        <div class="row">
            <div class = "d-flex justify-content-center col">
                <img class="image_icon_big" src="<%= asset_path('icon' + @icon.to_s + '.png') %>"/>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col" style="display: flex; justify-content: center;">
                        <p class="name_big"> <%= @name %></p>
                    </div>
                </div>
                <div class="row"> 
                    <div class="col" style="display: flex; justify-content: center;">
                        <p class="help_small"> Waiting for other players</p>
                    </div>
                </div>
            </div>
        </div>
   </div>
</div>




<script type="text/javascript">
    const webSocketUrl = 'ws://localhost:3000/cable';
    const bodyDiv = document.getElementById('body-id');

    var socket = new WebSocket(webSocketUrl);

    function get_src_img(name, param){
        return $.ajax({
            dataType: "text",
            url: '/user/get_image/',
            type: 'GET',
            data: {
                icon: param
            },
            success: function(json) {
                result = $.parseJSON(json);
                return result.one;
            },
            complete: function (json) {
                console.log("number = " + param)
                result = $.parseJSON(json.responseText);
                icon_url = "string"
                switch(param) {
                    case '1':
                        icon_url = result.one
                        break;
                    case '2':
                        icon_url = result.two
                        break;
                    case '3':
                        icon_url = result.three
                        break;
                    case '4':
                        icon_url = result.four
                        break;
                    case '5':
                        icon_url = result.five
                        break;
                    case '6':
                        icon_url = result.six
                        break;
                } 
                wait_after_answer(name, icon_url); 
            }
        });
    }

    function get_answers_img(message_v2){
        return $.ajax({
            dataType: "text",
            url: '/user/get_image/',
            type: 'GET',
            success: function(json) {
                result = $.parseJSON(json);
                return result.one;
            },
            complete: function (json) {
                result = $.parseJSON(json.responseText);
                renderMessage(message_v2, result); 
            }
        });
    }
    
    function wait_after_answer(name, img_src){
        const messageDiv = document.createElement('div');

        var s = '<div class = "full_body_white row" style="align-content:center;">\n<div class = "col"><div class="row">';
        s+= '<div class = "d-flex justify-content-center col"> <img class="image_icon_big" src="' + img_src + '"/></div></div>'
        s+= '<div class="row"> <div class="col"> <div class="row"> <div class="col" style="display: flex; justify-content: center;"><p class="name_big">' + name + '</p></div></div>';
        s+= '<div class="row">  <div class="col" style="display: flex; justify-content: center;"><p class="help_small"> Waiting for other players</p>';
        s+= '</div></div></div></div></div></div>';
        messageDiv.innerHTML = s;
        bodyDiv.innerHTML = messageDiv.innerHTML;
    }

    function sendAnswer(){
        var checkedValue = $('.icon:checked').val();
        var res = checkedValue.split(";");
        var hiddenVal = $('#custId').val();
        const msg = {
            command: 'message',
            identifier: JSON.stringify({
                room: 'stuff',
                channel: 'GameChannel'
            }),
            data: JSON.stringify({
                action: 'answer', args: JSON.stringify({
                    answer: res[0],
                    question: hiddenVal
                })
            })
        };
        socket.send(JSON.stringify(msg));

        var src_img = get_src_img(res[0], res[1]);
    }

    // Renders a specific message
    function renderMessage(messageObject, result) {
        const messageDiv = document.createElement('div');

        var s = ' <div class = "full_body_white row">\n  <input type="hidden" id="custId" name="custId" value="'+ messageObject.question + '">';
        var stuff = messageObject.answers;
        Object.keys(stuff).forEach(function(k) {
            icon_url = "string"
            console.log(k + ' -> ' + stuff[k])
            switch(stuff[k]) {
                case 1:
                    icon_url = result.one
                    break;
                case 2:
                    icon_url = result.two
                    break;
                case 3:
                    icon_url = result.three
                    break;
                case 4:
                    icon_url = result.four
                    break;
                case 5:
                    icon_url = result.five
                    break;
                case 6:
                    icon_url = result.six
                    break;
            } 
            s += '<div class = "d-flex justify-content-center col-6">\n';
            s += '<div class = "row" style="align-content: center;">\n';
            s += '<div class="card_answer card"> <div class="card-body">';
            s += '<input class="icon" id="icon_' + stuff[k] + '"  name="icon" type="radio" value="' + k + ';' + stuff[k] + '"/>\n';
            s += '<label for="icon_' + stuff[k] + '"><img class="image_icon_answer" src="' + icon_url + '"/>\n</label>\n';
            s += '<p class="name_answer">'+k+'</p>'; 
            s += '</div></div></div></div>';
            console.log(k + " : " + stuff[k]);
        });

       
        s += '<input id="vote_button" type="button" value="Vote" onclick="sendAnswer();"/>  \n</div>'
        messageDiv.innerHTML = s;
        bodyDiv.innerHTML = messageDiv.innerHTML;
    }

    window.onload = function() {
        // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel
        socket.onopen = function(event) {
            console.log('WebSocket is connected.');

            const msg = {
                command: 'subscribe',
                identifier: JSON.stringify({
                    room: 'stuff',
                    channel: 'GameChannel'
                }),
            };

            socket.send(JSON.stringify(msg));
        };

        // When the connection is closed, this code is run
        socket.onclose = function(event) {
            console.log('WebSocket is closed.');
        };

        // When a message is received through the websocket, this code is run
        socket.onmessage = function(event) {            
            const response = event.data;
            const msg = JSON.parse(response);
            
            // Ignores pings
            if (msg.type === "ping") {
                return;
            } 

            console.log("FROM RAILS: ", msg);
            
            // Renders any newly created messages onto the page
            if (msg.message) {
                const msg_v2 = JSON.parse(msg.message);
                get_answers_img(msg_v2)
            }
            
        };
        
        // When an error occurs through the websocket connection, this code is run printing the error message
        socket.onerror = function(error) {
            console.log('WebSocket Error: ' + error);
        };
    };
</script>